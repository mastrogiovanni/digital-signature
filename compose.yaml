services:
  
  traefik:
    image: "traefik:v2.10.4"
    restart: on-failure
    command:
      - "--log.level=INFO"
      - "--providers.docker.constraints=Label(`docker.project`, `etaireia`)"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--api.insecure=true"
      - "--api.dashboard=true"
    ports:
      - "80:80/tcp"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    labels:
     - "traefik.http.routers.traefik.entryPoints=traefik"
     - "traefik.http.routers.traefik.rule=PathPrefix(`/api`) || PathPrefix(`/dashboard`)"
     - "traefik.http.routers.traefik.service=api@internal"
     # - "traefik.http.routers.traefik.middlewares=traefik-auth"
     # echo $(htpasswd -nB michele.mastrogiovanni@gmail.com) | sed -e s/\\$/\\$\\$/g
     # - "traefik.http.middlewares.traefik-auth.basicauth.users=michele.mastrogiovanni@gmail.com:$$2y$$05$$FYl85XcjF1P9dy3lQ/qhAe7gWRngAbTCIZOpgB/kkLxD3IYAABtPO"

  documents-serving:
    image: nginx:1.23.4
    restart: always
    volumes:
      - "./signer-docs:/usr/share/nginx/html/static/documents:ro"
    labels:
      - "docker.project=etaireia"
      - "dev-kit.provided=true"
      - "traefik.enable=true"
      - "traefik.http.routers.documents-serving.entrypoints=web"
      - "traefik.http.routers.documents-serving.rule=PathPrefix(`/static/documents`)"
      - "traefik.http.services.documents-serving.loadbalancer.server.port=80"

  signer:
    image: node:18.18.0
    restart: on-failure
    command:
      - /bin/bash
      - -c 
      - "cd /app && npm run dev"
    environment:
      PORT: 3000
    volumes:
      - ./ui/signer:/app
    labels:
      - "docker.project=etaireia"
      - "traefik.enable=true"
      - "traefik.http.routers.signer.entrypoints=web"
      - "traefik.http.routers.signer.rule=PathPrefix(`/signer`)"
      - "traefik.http.services.signer.loadbalancer.server.port=3000"

  signer-be:
    image: node:18.18.0
    restart: on-failure
    command:
      - /bin/bash
      - -c 
      - "cd /app && npm run start:dev"
    volumes:
      - ./signer-be:/app
      - ./signer-docs:/docs
    labels:
      - "docker.project=etaireia"
      - "traefik.enable=true"
      - "traefik.http.routers.signer-be.entrypoints=web"
      - "traefik.http.routers.signer-be.middlewares=strip-signer"
      - "traefik.http.routers.signer-be.rule=PathPrefix(`/signer/api/v1`)"
      - "traefik.http.services.signer-be.loadbalancer.server.port=3000"
      - "traefik.http.middlewares.strip-signer.stripprefix.prefixes=/signer"
    environment:
      - "PORT=3000"
      - "DB_HOST=postgres"
      - "DB_PORT=5432"
      - "DB_USER=etaireia"
      - "DB_PASS=12345"
      - "DB_NAME=signature"
      - "DOCUMENT_ROOT_DIR=/docs"
    depends_on: 
      - postgres

  approval:
    image: node:18.18.0
    restart: on-failure
    command:
      - /bin/bash
      - -c 
      - "cd /app && npm run dev"
    environment:
      PORT: 3000

    volumes:
      - ./ui/approval:/app
    labels:
      - "docker.project=etaireia"
      - "traefik.enable=true"
      - "traefik.http.routers.approval.entrypoints=web"
      - "traefik.http.routers.approval.rule=PathPrefix(`/approval`)"
      - "traefik.http.services.approval.loadbalancer.server.port=3000"

  json-server:
    image: clue/json-server
    restart: on-failure
    labels:
      - "docker.project=etaireia"
      - "traefik.enable=true"
      - "traefik.http.routers.json-server.entrypoints=web"
      - "traefik.http.routers.json-server.middlewares=strip-json"
      - "traefik.http.routers.json-server.rule=PathPrefix(`/json/api/v1`)"
      - "traefik.http.services.json-server.loadbalancer.server.port=80"
      - "traefik.http.middlewares.strip-json.stripprefix.prefixes=/json/api/v1"
    volumes:
      - ./data/db.json:/data/db.json 

  # vault:
  #   image: hashicorp/vault
  #   volumes:
  #   - ./data/vault-file:/vault/file:rw
  #   - ./data/vault:/vault/config:rw
  #   command:
  #   - server
  #   cap_add:
  #   - IPC_LOCK
  #   labels:
  #   - "dev-kit.provided=true"
  #   - "docker.project=etaireia"
  #   - "traefik.enable=true"
  #   - "traefik.http.routers.vault.entrypoints=web"
  #   - "traefik.http.routers.vault.rule=PathPrefix(`/`)"
  #   - "traefik.http.services.vault.loadbalancer.server.port=8200"

  #-----------------------------------------
  # Storage
  #-----------------------------------------

  postgres:
    image: "postgres:13.7"
    hostname: postgres
    restart: always
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "password"
      PGDATA: "/data/postgres"
    labels:
      - "dev-kit.provided=true"
    volumes:
      - postgres-db-data:/data/postgres
      - ./data/postgres/pginit.sql:/docker-entrypoint-initdb.d/docker_postgres_init.sql
    ports:
      - 5432:5432

  # mongo:
  #   image: mongo:latest
  #   restart: on-failure
  #   environment:
  #     MONGO_INITDB_DATABASE: ${DATABASE_NAME}
  #     MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
  #     MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
  #   volumes:
  #     - ./data/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
  #     - mongodb_data_container:/data/db
  #   ports:
  #     - "27017:27017"

volumes:
  postgres-db-data:
  mongodb_data_container:
